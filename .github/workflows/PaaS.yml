name: Platform as a Service (PaaS)
run-name: ${{ github.actor }} triggered a CI job üöÄ
on: [push, workflow_call]
jobs:
  PaaS:
    runs-on: ubuntu-latest
    steps:
      - name: PaaS-Start-Up-Information
        run: | 
          echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
          echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "üçè This job's status is ${{ job.status }}."
      - name: Check out repository code
        uses: actions/checkout@v4 #https://github.com/marketplace/actions/checkout
      - name: Get repository information
        run: |
          echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
          echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
          echo "List files in the repository"
          ls -la ${{ github.workspace }}

      - name: Generate coverage report
        run: |
          pip install Flask pytest pytest-cov
          python -m pytest --cov=./ --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4 #https://github.com/marketplace/actions/codecov
        env:
          slug: Test/Slug
          # slug: Daniel-Perrinez/Dockerized_Flask_Website
        with:
          directory: ./
          # env_vars: OS,PYTHON
          fail_ci_if_error: true
          files: ./coverage.xml
          # flags: unittests
          name: test-codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: false
 
      - name: Lint Helm
        run: |
          if [ -f "helm/Chart.yaml" ]; then
            echo "Helm chart exists"
            helm lint helm
          else
            echo "File does not exist"
            exit 1;
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 #https://github.com/marketplace/actions/docker-setup-buildx
        with:
          platforms: linux/amd64
      - name: Login to Docker Hub
        if: ${{ success() }}
        uses: docker/login-action@v3 #https://github.com/marketplace/actions/docker-login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push
        if: ${{ success() }}
        uses: docker/build-push-action@v5 #https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: d1v3/paas_test:latest
        
      - run: echo "üçè This job's status is ${{ job.status }}."